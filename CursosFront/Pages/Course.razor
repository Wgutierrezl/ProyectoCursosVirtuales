@page "/Course"
@using Microsoft.AspNetCore.Components.Authorization;
@using CursosControllador;
@using Microsoft.AspNetCore.Authorization;
@inject AuthenticationStateProvider Provider
@inject IServiciosCursos ServiciosCursos
@inject IServiciosUsuario ServiciosUsuario
@attribute [Authorize(Roles = "Administrador,Instructor")]

<!DOCTYPE html>
    <html>
    <head>
        <title>Cursos Virtuales</title>
        <link rel="stylesheet" href="~/css/app.css" />
    </head>
    <body>
        <AuthorizeView>
            <Authorized>
            <h1>Usuario:@UserName=@context.User.Identity!.Name</h1>
            <h1>UsuarioID:@UsuarioID=@context.User.FindFirst("UsuarioID")?.Value</h1>
            </Authorized>
        </AuthorizeView>

        <h1>Gestionar cursos Virtuales</h1>


        <div>
            <h1>Traer todos los cursos</h1>
            <button @onclick="TraerCursos">Traerlos</button>
            @if(ListaC!=null)
            {
            <table>
                <thead>
                    <tr>
                        <th>CursoID</th>
                        <th>InstructorID</th>
                        <th>CursoName</th>
                        <th>Description</th>
                        <th>Duracion</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(Cursos item in ListaC)
                    {
                        <tr>
                            <td>@item.CursoID</td>
                            <td>@item.InstructorID</td>
                            <td>@item.NombreCurso</td>
                            <td>@item.Descripcion</td>
                            <td>@item.Duracion</td>
                        </tr>
                    }
                </tbody>
            </table>

            }
    </div>

</body>
</html>

@code {


    //Metodo para poder Acceder a los atributos de la sesion
    public string? UsuarioID { get; set; }
    public string? UserName { get; set; }
    protected override async Task OnInitializedAsync()
    {
        CursosPost = new Cursos();
        var AuthState = await Provider.GetAuthenticationStateAsync();
        var user = AuthState.User;
        UserName = user.Identity!.Name;
        UsuarioID = user.FindFirst("UsuarioID")?.Value;
    }




    //Metodo Post Para poder crear los Cursos
    public Cursos CursosPost { get; set; } = new Cursos();
    public bool SuccessPost = false;
    public string? MessagePost { get; set; }
    protected async Task NewCurso()
    {


        try
        {
            string url = "https://localhost:7244/api/Cursos";
            var response = await ServiciosCursos.PostCursos<Cursos>(url, CursosPost);

            if(!response.Error)
            {
                SuccessPost = true;
                MessagePost = String.Empty;
            }
            else
            {
                SuccessPost = false;
                MessagePost = await response.GetErrorMessageAsync();
            }

        }catch (Exception e)
        {
            SuccessPost = false;
            MessagePost = e.Message;

        }
    }

    public List<Cursos>? ListaC { get; set; }
    public string? MessageList { get; set; }
    protected async Task TraerCursos()
    {
        try
        {
            string url = "https://localhost:7244/api/Cursos";
            var response = await ServiciosCursos.GetCursos<List<Cursos>>(url);
            if(!response.Error)
            {
                ListaC = response.Response;
                MessageList = String.Empty;

            }
            else
            {
                ListaC = null;
                MessageList = String.Empty;
            }

        }catch (Exception e)
        {
            ListaC = null;
            MessageList = e.Message;
        }

    }
}
